#pragma kernel CSMain
#pragma kernel CSMainGaussian

RWTexture3D<float4> Destination;
Texture3D<float4> Source;

SamplerState _LinearClamp;
SamplerState _PointClamp;

int destinationRes;

float4 ClipmapOverlap;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (uint i = 0; i < (uint)destinationRes / 2u; i++)
    {
        float3 fcoord = float3((float)id.x / destinationRes, (float)id.y / destinationRes, (float)i / destinationRes);
		fcoord *= 2.0;
        float texel = 1.0 / destinationRes;

		float3 sampleCoord = (fcoord) * 1.0 - 0.0 + ClipmapOverlap.xyz * 0.0;

        float4 tex = Source.SampleLevel(_LinearClamp, sampleCoord + texel * 1.0, 0.0);
		tex.rgba *= 2.0;

		float3 writeCoord = fcoord;
		writeCoord = writeCoord * 0.5 + 0.25;
		writeCoord += ClipmapOverlap.xyz * 1.0;
		writeCoord *= destinationRes;
		uint3 writeCoordi = uint3(writeCoord.x, writeCoord.y, writeCoord.z);

        Destination[writeCoordi] = tex;
    }
}

[numthreads(8,8,1)]
void CSMainGaussian (uint3 id : SV_DispatchThreadID)
{

    float3 offsets[8] = 
    {
        float3(1.0, 1.0, 1.0),
        float3(1.0, 1.0, -1.0),
        float3(1.0, -1.0, 1.0),
        float3(1.0, -1.0, -1.0),
        float3(-1.0, 1.0, 1.0),
        float3(-1.0, 1.0, -1.0),
        float3(-1.0, -1.0, 1.0),
        float3(-1.0, -1.0, -1.0)
    };

    for (int i = 0; i < destinationRes; i++)
    {
        float3 fcoord = float3((float)id.x / destinationRes, (float)id.y / destinationRes, (float)i / destinationRes);
        float texel = 1.0 / destinationRes;

        float4 tex = float4(0,0,0,0);


        int c = 0;

        for (int j = 0; j < 8; j++)
        {
            float3 offset = float3(0, 0, 0);

            offset = offsets[j];

            tex += Source.SampleLevel(_LinearClamp, fcoord + texel * 0.5 + offset * texel * 0.5, 0.0);
            c++;
        }

        tex /= c;
        

        Destination[uint3(id.xy, i)] = tex;
    }
}
